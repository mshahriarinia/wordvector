package io;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class VectorDistance {
	double radius = 80;// 35;
	int limit = 10;//5;

	public static void main(String[] args) {

		String s;

		VectorDistance vd = new VectorDistance();
		


		// WordVector wv = new WordVector();
		// wv.word = "Iraq";
		// wv.vector =
		// "-0.69058,-0.15561,0.60901,0.68047,0.0074601,-0.22835,-1.2779,0.69026,-0.17422,3.1556,-0.17909,-0.22713,0.21862,-0.22481,-0.59741,-0.12398,-0.78558,-0.32795,-1.008,0.49362,0.20032,0.41834,-0.07942,0.53222,0.051901,-0.48081,-0.99707,0.061099,-0.19757,-0.02997,0.28437,0.21068,-0.50137,-0.12364,0.30457,-0.29471,0.29198,-0.052427,0.47353,0.070429,-0.1114,0.32403,0.42076,-0.38002,-0.31781,-0.22398,-0.17633,-0.14025,0.61045,0.36805,0.37257,0.060338,-0.40761,0.31622,-0.21868,0.89088,0.049234,-0.42586,0.57675,0.25043,-0.62998,0.22168,-0.075704,-0.6637,0.48885,-0.043886,-0.07405,-0.068761,-0.082624,0.31189,-0.46052,-0.11043,0.13571,0.45352,0.77705,-0.20147,-0.40522,-0.11417,-0.083244,0.45185,0.11583,-0.085109,-0.017904,0.52523,-0.19984,-0.071112,-0.39675,-0.83402,0.51584,0.57692,-0.46033,0.022388,-0.35251,0.31637,-0.37096,0.21239,-0.30956,-0.42333,0.30542,-0.60421,0.070839,0.70409,0.13093,0.08811,0.26985,-0.37847,-0.33091,-0.49372,-0.44322,0.41296,-0.65034,0.15375,-0.60687,0.80945,-0.12809,0.29508,0.29908,0.41715,-0.013751,-0.80028,0.32,0.34244,0.38063,0.28886,0.17891,-0.46963,0.05959,-0.026535,0.3094,0.281,0.43395,0.2391,-0.14509,0.44697,-0.51091,0.2874,0.24237,-0.039918,-0.39718,0.033704,-0.1812,-0.22078,0.72503,0.20984,-0.31293,0.20827,0.38342,0.59253,0.21701,-0.1531,0.26792,0.51007,0.018575,0.049112,0.095901,0.13177,0.4806,0.65518,-0.41199,0.17177,0.18826,0.27263,0.16854,0.77421,-1.0895,-0.14016,-0.21771,-0.48413,0.27299,-0.25076,-0.49239,0.056277,0.39836,0.035532,0.48392,-0.014239,0.14764,0.019006,0.31397,0.19585,-0.27053,-0.30553,-0.36167,0.14727,0.080001,-0.23194,0.6185,0.073371,-0.49753,0.066956,-0.093274,0.26779,0.41112,0.54729,-0.66501,-0.17469,-0.078182,-0.040334,-0.67283,-0.54337,0.34041,0.63599,0.49782,0.46671,1.1555,-0.45673,-0.049193,-0.18849,0.07655,-0.18111,0.83246,-0.046975,-0.089936,0.02069,0.35137,-0.54584,-0.055892,0.2482,-0.49667,-0.016385,-0.00072395,0.33006,0.11532,-0.32663,-0.13374,0.83799,0.63754,0.18771,0.40092,0.28321,-0.13777,0.52238,0.035298,-0.50541,-0.2738,-0.61256,0.57909,0.63488,0.36137,0.41086,-0.16284,0.069937,-0.006283,0.079258,-0.25581,0.15992,0.55504,0.075801,0.47746,-0.20007,-0.055564,0.52298,0.59764,-0.14677,-0.4369,0.36685,-0.37234,0.00474,-0.6296,-0.10075,-0.52734,-0.35844,-0.10761,-0.10184,0.17289,-0.89757,0.5552,-0.21461,0.79867,0.45988,0.84949,-0.12052,-0.084105,-0.58664,-0.22165,-0.28839,0.75638,-0.28805,0.16782,0.66949,0.64901,-0.31354,-0.52446,-0.41499,-0.16532,0.083557,-0.44907,0.4135,0.029476,0.18621,-0.3827,0.26219,-0.52566,-0.46964,-0.24326,-0.041607,-0.18753,0.30133,-0.12342,-0.12313";
		// // s= vd.getDistanceQuery(wv.vector2arr());
		// s = vd.getDistanceQuerySplitted(wv.vector2arr());
		// System.out.println(s);

//		wv2.word = "Baghdad+located";
//		wv2.vector = "0.687334,-0.072701,0.680280,0.379940,1.119020,-0.030095,-1.821930,0.434000,0.041020,4.842700,0.077310,-0.291563,-0.165302,-0.412030,-0.869700,-0.015612,-0.249910,1.409540,-0.549283,-0.703290,-0.321300,0.864010,-0.148666,0.693079,0.589040,-0.618000,-1.385760,-0.177359,-0.804600,0.278700,0.838450,0.073550,-0.369560,0.288910,-0.787264,-0.531290,-0.062330,1.017810,0.737070,-0.433660,-0.141130,0.571690,0.084433,-0.447030,0.529500,0.227810,0.237177,-0.736367,-0.639080,-0.283590,0.702590,0.207954,-0.290480,1.373540,0.579210,0.216450,0.233878,-0.371299,0.919100,1.017280,0.062670,-0.017659,-0.456850,0.449560,0.168290,0.038590,-0.068359,-0.093400,-0.245738,1.457470,-0.629663,-0.672740,-0.014330,0.700910,0.482777,-0.159224,-0.223191,0.003110,-0.302140,-0.284480,0.957630,0.019309,0.248135,-0.019594,-0.357818,0.567750,-0.436406,0.430580,-0.450022,0.145300,-0.802241,0.478300,-0.262763,-0.912940,0.615600,0.072201,-0.337070,-0.323860,-0.229706,-0.652340,-0.087318,0.942520,0.514397,0.127520,0.737380,-0.049620,-0.491470,0.009220,-0.668560,-0.215636,-0.037423,0.504509,-0.094753,1.445240,-0.099410,-0.118772,0.134760,0.524740,-1.345110,-1.063610,0.326820,0.023574,0.995740,-0.886203,-0.120305,-0.747570,0.654666,-0.842820,0.758740,0.462214,0.397004,0.349640,-0.236186,-0.011240,0.033640,-0.591730,0.300393,-0.560260,-0.491782,-0.167100,1.134563,-0.309414,-0.158840,-0.992890,-0.032120,0.348646,0.594388,-0.207173,0.989390,-0.336813,-0.384100,0.796100,-0.294249,0.172485,-0.687510,-0.018859,-0.571320,0.246942,-0.864560,-0.207832,0.756541,0.242419,0.483628,0.670300,0.342665,-0.195600,-0.126040,-0.197050,0.536010,-0.099520,0.531761,0.314895,-0.477940,-0.292584,-0.229843,-0.097413,-0.276495,0.181715,-0.291220,-0.633417,0.309763,-0.123331,-0.740953,-0.682340,0.533850,0.279475,0.279923,-0.060270,-0.046530,-0.394510,-0.492636,-0.140550,-0.208130,0.898760,-0.513440,-0.031239,0.178203,-0.276002,-0.864950,-0.528340,0.189088,0.288187,0.240270,0.273574,1.712130,-0.265240,0.273500,-0.030046,0.024290,-1.102630,0.610557,-0.511730,-0.316720,-0.233520,0.478520,-0.522910,-0.133722,-0.011861,0.262470,0.193735,0.256288,-0.400073,0.445712,0.098360,0.031540,0.383680,0.615830,0.967020,0.220710,0.655400,0.075610,0.540150,0.381570,-0.782710,0.049847,-0.010020,0.630330,0.105970,0.279122,0.386810,0.753720,0.956980,0.656840,0.307620,-0.487840,0.081770,0.209880,0.338430,0.166210,-0.815910,-0.881930,0.095520,0.934210,0.482850,0.362172,1.092970,-0.047650,0.062210,-0.615070,-0.686410,0.099140,-1.535680,-0.387890,-1.041500,-0.211298,-0.654240,0.713712,-0.839590,-0.953312,-0.179930,-0.474890,-0.138113,-0.538200,-0.859320,-0.412400,-0.105547,0.971270,-0.640030,-0.217628,0.399720,1.120310,-0.446160,-0.378477,0.170530,-0.712360,0.513310,-0.390220,0.217542,0.003150,-0.291771,-0.251647,0.164714,-0.357320,-0.094078,-0.360200,-0.382883,-0.337390,0.330490,-0.265052,-0.071970";

//		wv.word = "Bc";
//		wv.vector = "0.287434,-0.282988,0.782690,0.406420,0.369470,-0.197361,-2.015600,1.130470,-0.247430,5.201700,-0.729980,-0.422780,-0.142728,0.230800,-1.175660,0.484915,-0.513550,0.441140,-0.553653,0.012740,0.427410,1.132570,-0.664350,0.391490,-0.217660,-0.494560,-1.126560,0.131350,-0.684460,0.011690,0.733410,-0.445710,-0.756247,0.377060,-0.165080,-0.002540,0.158989,0.250020,0.989266,-0.639530,0.409180,0.044992,0.615250,-0.462580,0.396910,-0.701360,0.424987,-0.056853,-0.369060,0.034160,0.588245,0.453484,-0.859360,1.438280,0.943480,0.764424,0.433900,-0.653370,1.013600,0.719020,-0.361550,-0.352573,-0.456340,-0.083690,0.695160,0.487380,0.564871,0.241880,-0.458180,0.687060,-0.482599,-0.484470,-0.616030,0.407481,0.348890,0.035944,-0.069091,0.711080,-0.335290,0.042981,1.001070,0.366018,0.654760,0.494365,-0.694310,0.919170,-1.071880,-0.507038,-0.012970,0.638509,0.188949,0.492240,0.132447,-1.141730,0.430310,0.162949,-0.458840,0.328030,-0.082723,0.270160,0.225219,0.956190,0.082100,-0.013240,0.257574,-2.226890,-0.474750,-0.398010,-0.166805,-0.083926,-0.376480,0.308040,-0.423107,1.249060,-0.532370,-0.322460,0.412820,0.233818,-0.390240,-1.248550,0.500328,0.880256,0.550500,-0.348433,-0.788410,-0.291920,0.625511,-0.172310,0.666164,0.124840,0.496043,0.447250,0.227724,0.315887,-0.445300,-1.015500,0.107610,-0.326910,-1.073650,-0.037940,0.050883,-0.513030,0.586835,-1.251260,-0.214980,0.111030,1.066040,0.463997,0.731880,0.263517,0.555610,0.821800,-0.438050,0.100227,-0.510240,-0.590320,-0.138260,0.013490,-0.825450,-0.352432,0.426511,1.189920,-0.421932,-0.025020,-0.330845,-0.605769,0.717330,-0.308040,0.046970,0.151400,0.409061,0.100590,0.054850,-0.489670,0.223537,-0.586410,0.463295,0.089041,0.609970,-1.277680,0.408283,-0.109851,-0.610519,-0.697240,-0.031750,0.735660,-0.115500,0.031380,-0.187637,-0.727090,0.083904,0.506500,0.551820,0.708040,-0.501510,-0.706693,0.173943,0.166388,-0.484700,-0.409960,0.158931,0.368710,0.489520,0.908410,1.506240,-0.662510,0.752360,-0.119372,0.028770,-0.233569,0.892090,-0.140486,0.181640,0.415120,0.983430,-0.710789,-0.186934,0.236617,0.602960,0.468305,0.179572,0.168657,-0.161998,0.473810,-0.591760,0.313200,0.337614,1.222180,0.103431,0.022520,0.210030,0.238995,-0.208250,-0.940750,-0.381583,-0.526326,0.040780,0.438787,0.222707,0.695860,0.273224,0.563801,0.464540,-0.436718,0.516150,-0.099800,1.438350,-0.440460,0.124760,-1.049800,-0.797180,0.780870,0.721290,0.273060,0.063114,1.094560,-0.726070,-0.714640,-0.946900,-0.134240,-0.562020,-0.451590,-0.913890,0.279980,-0.229470,-1.312290,0.471100,-0.597030,0.139444,-0.096320,-0.101410,-0.605063,-0.330970,-0.776520,-0.390600,-0.085771,1.238740,-1.114320,0.183830,0.712013,0.978380,-0.872780,-0.471710,0.072350,-0.944790,0.389708,-0.125930,0.539100,-0.761000,0.223909,-0.843850,0.486804,-0.473510,-0.468860,-0.921770,-0.546760,-0.340500,0.111560,-0.274302,-0.699900";

		String word = "Ic";
		String vector = "0.287434,-0.282988,0.782690,0.406420,0.369470,-0.197361,-2.015600,1.130470,-0.247430,5.201700,-0.729980,-0.422780,-0.142728,0.230800,-1.175660,0.484915,-0.513550,0.441140,-0.553653,0.012740,0.427410,1.132570,-0.664350,0.391490,-0.217660,-0.494560,-1.126560,0.131350,-0.684460,0.011690,0.733410,-0.445710,-0.756247,0.377060,-0.165080,-0.002540,0.158989,0.250020,0.989266,-0.639530,0.409180,0.044992,0.615250,-0.462580,0.396910,-0.701360,0.424987,-0.056853,-0.369060,0.034160,0.588245,0.453484,-0.859360,1.438280,0.943480,0.764424,0.433900,-0.653370,1.013600,0.719020,-0.361550,-0.352573,-0.456340,-0.083690,0.695160,0.487380,0.564871,0.241880,-0.458180,0.687060,-0.482599,-0.484470,-0.616030,0.407481,0.348890,0.035944,-0.069091,0.711080,-0.335290,0.042981,1.001070,0.366018,0.654760,0.494365,-0.694310,0.919170,-1.071880,-0.507038,-0.012970,0.638509,0.188949,0.492240,0.132447,-1.141730,0.430310,0.162949,-0.458840,0.328030,-0.082723,0.270160,0.225219,0.956190,0.082100,-0.013240,0.257574,-2.226890,-0.474750,-0.398010,-0.166805,-0.083926,-0.376480,0.308040,-0.423107,1.249060,-0.532370,-0.322460,0.412820,0.233818,-0.390240,-1.248550,0.500328,0.880256,0.550500,-0.348433,-0.788410,-0.291920,0.625511,-0.172310,0.666164,0.124840,0.496043,0.447250,0.227724,0.315887,-0.445300,-1.015500,0.107610,-0.326910,-1.073650,-0.037940,0.050883,-0.513030,0.586835,-1.251260,-0.214980,0.111030,1.066040,0.463997,0.731880,0.263517,0.555610,0.821800,-0.438050,0.100227,-0.510240,-0.590320,-0.138260,0.013490,-0.825450,-0.352432,0.426511,1.189920,-0.421932,-0.025020,-0.330845,-0.605769,0.717330,-0.308040,0.046970,0.151400,0.409061,0.100590,0.054850,-0.489670,0.223537,-0.586410,0.463295,0.089041,0.609970,-1.277680,0.408283,-0.109851,-0.610519,-0.697240,-0.031750,0.735660,-0.115500,0.031380,-0.187637,-0.727090,0.083904,0.506500,0.551820,0.708040,-0.501510,-0.706693,0.173943,0.166388,-0.484700,-0.409960,0.158931,0.368710,0.489520,0.908410,1.506240,-0.662510,0.752360,-0.119372,0.028770,-0.233569,0.892090,-0.140486,0.181640,0.415120,0.983430,-0.710789,-0.186934,0.236617,0.602960,0.468305,0.179572,0.168657,-0.161998,0.473810,-0.591760,0.313200,0.337614,1.222180,0.103431,0.022520,0.210030,0.238995,-0.208250,-0.940750,-0.381583,-0.526326,0.040780,0.438787,0.222707,0.695860,0.273224,0.563801,0.464540,-0.436718,0.516150,-0.099800,1.438350,-0.440460,0.124760,-1.049800,-0.797180,0.780870,0.721290,0.273060,0.063114,1.094560,-0.726070,-0.714640,-0.946900,-0.134240,-0.562020,-0.451590,-0.913890,0.279980,-0.229470,-1.312290,0.471100,-0.597030,0.139444,-0.096320,-0.101410,-0.605063,-0.330970,-0.776520,-0.390600,-0.085771,1.238740,-1.114320,0.183830,0.712013,0.978380,-0.872780,-0.471710,0.072350,-0.944790,0.389708,-0.125930,0.539100,-0.761000,0.223909,-0.843850,0.486804,-0.473510,-0.468860,-0.921770,-0.546760,-0.340500,0.111560,-0.274302,-0.699900";
		WordVector wv = new WordVector(word, vector);

		
		s = vd.getDistanceQuerySplitted(wv.getVectorArray());
		System.out.println(s);

	}

	String getDistanceQuery(double[] point) {
		String sql = "SELECT * FROM tbl_word2vec WHERE \n";
		String distance_sql = "(   ";
		for (int i = 0; i < point.length; i++) {
			distance_sql = distance_sql
					+ " pow(SUBSTRING_INDEX(SUBSTRING_INDEX(vector, ',', "
					+ (i + 1) + "), ',', -1) - " + point[i] + ", 2) + \n";
		}
		distance_sql = distance_sql.substring(0, distance_sql.length() - 3);
		distance_sql = distance_sql + "   )";

		sql = sql + distance_sql + " < " + radius + " limit " + limit + ";";
		return sql;
	}

	String getDistanceQuerySplitted(float[] point) {
		String distance_sql = "sqrt(   ";
		for (int i = 0; i < point.length; i++) {
			distance_sql = distance_sql
					+ " pow(SUBSTRING_INDEX(SUBSTRING_INDEX(vector, ',', "
					+ (i + 1) + "), ',', -1) - " + point[i] + ", 2) + \n";
		}
		distance_sql = distance_sql.substring(0, distance_sql.length() - 3);
		distance_sql = distance_sql + "   )";

//		String sql = "SELECT idtbl_word2vec, word, " + distance_sql
//				+ " as distance FROM tbl_word2vec WHERE \n";
//
//		sql = sql + distance_sql + " < " + radius + " limit " + limit + ";";
		String sql = "SELECT idtbl_word2vec, word, " + distance_sql
				+ " as distance FROM (select * from tbl_word2vec where word like 'Ir%') as inn1";
		return sql;
	}
	
//	String getDistanceQueryCasted(double[] point) {
//		String distance_sql = "(   ";
//		for (int i = 0; i < point.length; i++) {
//			distance_sql = distance_sql
//					+ " pow(CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(vector, ',', "
//					+ (i + 1) + "), ',', -1) AS DECIMAL(10,2)) - " + point[i] + ", 2) + \n";
//		}
//		distance_sql = distance_sql.substring(0, distance_sql.length() - 3);
//		distance_sql = distance_sql + "   )";
//
//		String sql = "SELECT idtbl_word2vec, word, " + distance_sql
//				+ " as distance FROM (select * from tbl_word2vec where word like 'Ir%') as inn1";
//
//		return sql;
//	}

}
