package edu.ufl.cise.wordvector.io;

import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.function.Function;
import java.util.regex.Pattern;

import com.google.common.base.Preconditions;
import com.google.common.base.Splitter;
import com.google.common.collect.Lists;
import com.google.common.primitives.Floats;

public class LinearAlgebra {

	public static final int VECTOR_LENGTH = 300;

	public static final DecimalFormat df = new DecimalFormat("0.00");

	// public static final float[] ZERO = new float[VECTOR_LENGTH];

	public static double distance(float[] v1, float[] v2) {
		return norm(subtract(v1, v2));
	}

	public static float[] subtract(float[] v1, float[] v2) {
		float[] res = new float[VECTOR_LENGTH];
		for (int i = 0; i < VECTOR_LENGTH; i++) {
			res[i] = v1[i] - v2[i];
		}
		return res;
	}

	public static float[] add(float[] v1, float[] v2) {
		float[] res = new float[VECTOR_LENGTH];
		for (int i = 0; i < VECTOR_LENGTH; i++) {
			res[i] = v1[i] + v2[i];
		}
		return res;
	}

	/**
	 * dot product fo two vectors
	 * 
	 * @param a
	 * @param b
	 * @return
	 */
	static double dot(float[] a, float[] b) {
		double sum = 0;

		for (int j = 0; j < VECTOR_LENGTH; j++) {
			sum += a[j] * b[j];
		}
		return sum;
	}

	/**
	 * Magnitude of a vector
	 * 
	 * @param a
	 * @return
	 */
	static double norm(float[] a) {
		double sum = 0;

		for (int j = 0; j < VECTOR_LENGTH; j++) {
			sum += a[j] * a[j];
		}
		return Math.sqrt(sum);
	}

	/**
	 * Cosine similarity
	 * 
	 * @param a
	 * @param b
	 * @return
	 */
	static double cossim(float[] a, float[] b) {
		return dot(a, b) / (norm(a) * norm(b));
	}

	/**
	 * convert
	 * "[0.043798, 0.024779, -0.20937, 0.49745, 0.36019, -0.37503, -0.052078, -0.60555, 0.036744, 2.2085, -0.23389, -0.06836, -0.22355, -0.053989, -0.15198, -0.17319, 0.053355, 1.6485, -0.047991, -0.085311, -0.15712, -0.64425, -0.39819, 0.278, 0.15364, 0.031678, 0.055414, 0.015939, 0.31851, -0.058979, 0.038584, 0.1077, 0.1041, -0.077346, 0.37396, -0.21482, 0.3832, -0.27737, -0.18352, -0.83838, 0.34124, 0.58164, 0.18543, -0.31028, 0.17666, -0.069421, -0.34422, -0.13665, -0.10823, 0.23637, -0.32923, 0.61348, 0.1972, 0.087123, 0.10785, 0.3073, 0.13757, 0.30809, 0.24331, -0.29422, -0.0098214, 0.55675, -0.04888, 0.099468, 0.30543, -0.37597, -0.19525, 0.046246, -0.036675, 0.34023, 0.14905, 0.0978, -0.26664, 0.056834, -0.043201, -0.23338, 0.13111, -0.35742, -0.3607, 0.30997, -0.19727, -0.1432, -0.16747, 4.2435E-4, -0.1512, 0.067562, -0.38644, 0.025349, 0.24918, -0.23955, -0.15615, 0.49868, 0.0082758, -0.1912, -0.14906, 0.48757, -0.015281, 0.010196, 0.37642, -0.01946, -0.27835, 0.16355, -0.24127, -0.21405, -0.21562, -0.79697, 0.34321, 0.093209, 0.073977, -0.27147, 0.20539, 0.15061, 0.020734, 0.11267, 0.028714, 0.2967, -0.21267, 0.43214, 0.12788, 0.29249, 0.19056, -0.29113, -0.11382, -0.038242, -0.2029, 0.18301, -0.16661, -0.27116, 0.0012685, 0.071704, -0.18583, 0.08985, -0.039895, 0.39479, 0.0053211, -6.1548E-4, -0.27082, -0.089782, -0.2879, -0.14865, -1.3746, 0.16515, 0.20598, 0.15252, 0.034723, -0.38531, -0.094574, -0.19871, 0.50239, -0.28702, -0.088727, 0.056881, 0.13634, 0.19034, -0.19353, 0.40506, -0.19317, 0.22908, 0.10055, -0.26895, -0.034727, -0.08401, 0.057806, 0.011076, -0.043349, -0.26917, -0.19333, 0.22181, 0.26123, -0.11761, 0.10092, -0.15078, 0.47153, 0.11253, -0.26749, -0.038785, -0.03652, -0.089248, -0.24427, -0.041381, -0.021785, -0.35738, -0.063409, -0.53983, -0.010112, 4.1238E-4, -0.097049, 0.42628, -0.21349, -0.41055, -0.2494, -0.033571, -0.4954, 0.15557, 0.19882, 0.10498, -0.24372, 0.11429, -0.039279, -0.36258, 0.10318, 0.129, -0.41785, -0.041607, 0.33522, 0.073186, 0.13362, 0.010812, 0.052645, 0.18801, -0.30185, 0.20333, -0.32258, -0.24673, 0.21124, 0.79132, -0.41539, 0.3622, 0.099852, -0.035378, -0.0419, -0.13851, -0.063255, 0.13635, 0.090863, -0.3994, 0.099062, 0.3221, -0.12256, -0.085906, -0.10218, 0.2635, -0.18689, -0.1856, -0.43923, -0.325, -0.1991, 0.17831, -0.27283, 0.33473, 0.082382, 0.12825, 0.39275, -0.034929, 0.16148, -0.026713, 0.40129, -0.39503, -0.064823, -0.08982, -0.066592, -0.34537, 0.046283, 0.36837, -0.024573, 0.32213, 0.30641, -0.28112, 0.0066449, 0.087743, -0.03417, 0.60373, 0.4212, -0.073349, 0.26682, -0.1586, 0.23765, -0.0062604, 0.15236, -0.23409, 0.31634, -0.08786, -0.15747, -0.24955, -0.18766, -0.096743, -0.27994, -0.24334, 0.32643, 0.29906, 0.42763, 0.22266, -0.17464, -0.019916, -0.31206, -0.34009, -0.14993, -0.28818, 0.1475, -0.040503, -0.10347, 0.0033634, 0.2176, -0.20409, 0.092415, 0.080421, -0.061246, -0.30099, -0.14584, 0.28188]"
	 * to its float[] equivalent
	 * 
	 * @param floatArrayStr
	 * @return
	 */
	public static float[] toFloatArray(String floatArrayStr) {
		String temp = floatArrayStr.trim().substring(1, floatArrayStr.length() - 1);

		String[] floatStrArray = temp.split(",");
		float[] floatArray = new float[floatStrArray.length];
		for (int i = 0; i < floatArray.length; i++) {
			floatArray[i] = Float.parseFloat(floatStrArray[i]);
		}

		return floatArray;
	}

	public static void main(String[] args) {
		String s = "[0.043798, 0.024779, -0.20937, 0.49745, 0.36019, -0.37503, -0.052078, -0.60555, 0.036744, 2.2085, -0.23389, -0.06836, -0.22355, -0.053989, -0.15198, -0.17319, 0.053355, 1.6485, -0.047991, -0.085311, -0.15712, -0.64425, -0.39819, 0.278, 0.15364, 0.031678, 0.055414, 0.015939, 0.31851, -0.058979, 0.038584, 0.1077, 0.1041, -0.077346, 0.37396, -0.21482, 0.3832, -0.27737, -0.18352, -0.83838, 0.34124, 0.58164, 0.18543, -0.31028, 0.17666, -0.069421, -0.34422, -0.13665, -0.10823, 0.23637, -0.32923, 0.61348, 0.1972, 0.087123, 0.10785, 0.3073, 0.13757, 0.30809, 0.24331, -0.29422, -0.0098214, 0.55675, -0.04888, 0.099468, 0.30543, -0.37597, -0.19525, 0.046246, -0.036675, 0.34023, 0.14905, 0.0978, -0.26664, 0.056834, -0.043201, -0.23338, 0.13111, -0.35742, -0.3607, 0.30997, -0.19727, -0.1432, -0.16747, 4.2435E-4, -0.1512, 0.067562, -0.38644, 0.025349, 0.24918, -0.23955, -0.15615, 0.49868, 0.0082758, -0.1912, -0.14906, 0.48757, -0.015281, 0.010196, 0.37642, -0.01946, -0.27835, 0.16355, -0.24127, -0.21405, -0.21562, -0.79697, 0.34321, 0.093209, 0.073977, -0.27147, 0.20539, 0.15061, 0.020734, 0.11267, 0.028714, 0.2967, -0.21267, 0.43214, 0.12788, 0.29249, 0.19056, -0.29113, -0.11382, -0.038242, -0.2029, 0.18301, -0.16661, -0.27116, 0.0012685, 0.071704, -0.18583, 0.08985, -0.039895, 0.39479, 0.0053211, -6.1548E-4, -0.27082, -0.089782, -0.2879, -0.14865, -1.3746, 0.16515, 0.20598, 0.15252, 0.034723, -0.38531, -0.094574, -0.19871, 0.50239, -0.28702, -0.088727, 0.056881, 0.13634, 0.19034, -0.19353, 0.40506, -0.19317, 0.22908, 0.10055, -0.26895, -0.034727, -0.08401, 0.057806, 0.011076, -0.043349, -0.26917, -0.19333, 0.22181, 0.26123, -0.11761, 0.10092, -0.15078, 0.47153, 0.11253, -0.26749, -0.038785, -0.03652, -0.089248, -0.24427, -0.041381, -0.021785, -0.35738, -0.063409, -0.53983, -0.010112, 4.1238E-4, -0.097049, 0.42628, -0.21349, -0.41055, -0.2494, -0.033571, -0.4954, 0.15557, 0.19882, 0.10498, -0.24372, 0.11429, -0.039279, -0.36258, 0.10318, 0.129, -0.41785, -0.041607, 0.33522, 0.073186, 0.13362, 0.010812, 0.052645, 0.18801, -0.30185, 0.20333, -0.32258, -0.24673, 0.21124, 0.79132, -0.41539, 0.3622, 0.099852, -0.035378, -0.0419, -0.13851, -0.063255, 0.13635, 0.090863, -0.3994, 0.099062, 0.3221, -0.12256, -0.085906, -0.10218, 0.2635, -0.18689, -0.1856, -0.43923, -0.325, -0.1991, 0.17831, -0.27283, 0.33473, 0.082382, 0.12825, 0.39275, -0.034929, 0.16148, -0.026713, 0.40129, -0.39503, -0.064823, -0.08982, -0.066592, -0.34537, 0.046283, 0.36837, -0.024573, 0.32213, 0.30641, -0.28112, 0.0066449, 0.087743, -0.03417, 0.60373, 0.4212, -0.073349, 0.26682, -0.1586, 0.23765, -0.0062604, 0.15236, -0.23409, 0.31634, -0.08786, -0.15747, -0.24955, -0.18766, -0.096743, -0.27994, -0.24334, 0.32643, 0.29906, 0.42763, 0.22266, -0.17464, -0.019916, -0.31206, -0.34009, -0.14993, -0.28818, 0.1475, -0.040503, -0.10347, 0.0033634, 0.2176, -0.20409, 0.092415, 0.080421, -0.061246, -0.30099, -0.14584, 0.28188]";
		float[] fArr = toFloatArray(s);
		System.out.println(Arrays.toString(fArr));
	}

}
